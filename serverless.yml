service: battle-site-home
frameworkVersion: ^2.35.0"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile}
  lambdaHashingVersion: '20201221'
  environment:
    NODE_ENV: ${env:NODE_ENV}
    MAILCHIMP_API_KEY: ${env:MAILCHIMP_API_KEY}
    MAILCHIMP_AUDIENCE_ID: ${env:MAILCHIMP_AUDIENCE_ID}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3: *'
      Resource:
        - 'arn:aws:s3:::${self:custom.nuxt.bucketName}/*'

plugins:
  - serverless-nuxt-plugin
  - serverless-apigw-binary
  - serverless-domain-manager

custom:
  customDomain:
    domainName: ${env:DOMAIN_NAME}
  apigwBinary:
    types:
      - 'image/*'
  nuxt:
    version: v1
    bucketName: battle-line-productions-${self:provider.stage}-v2
    cdnPath: https://${env:ASSETS_DOMAIN_NAME}

resources:
  Resources:
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.nuxt.bucketName}
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
              - GET
              - HEAD
              AllowedOrigins:
              - https://${env:DOMAIN_NAME}
    AssetsUIBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AssetsBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource:
                {
                  'Fn::Join':
                    ['', ['arn:aws:s3:::', { Ref: AssetsBucket }, '/*']],
                }
              Principal:
                CanonicalUser:
                  'Fn::GetAtt':
                    [AssetsUIOriginAccessIdentity, S3CanonicalUserId]
    RedirectBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:REDIRECT_DOMAIN_NAME}
        WebsiteConfiguration:
          RedirectAllRequestsTo:
            HostName: ${env:DOMAIN_NAME}
            Protocol: https
    # RedirectRoute53ARecord:
    #   Type: AWS::Route53::RecordSet
    #   Properties:
    #     HostedZoneName: ${env:DOMAIN_HOSTED_ZONE}
    #     Name: ${env:REDIRECT_DOMAIN_NAME}
    #     Type: A
    #     AliasTarget:
    #       DNSName: s3-website.us-east-2.amazonaws.com
    #       HostedZoneId: Z075584225FDBNT9EDT7R
    #       EvaluateTargetHealth: false
    AssetsUIOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'CloudFrontOriginAccessIdentity for ${self:service}-${self:provider.stage}'
    AssetsCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          Restrictions:
            GeoRestriction:
              RestrictionType: whitelist
              Locations:
                - US
          Aliases:
            - ${env:ASSETS_DOMAIN_NAME}
          Origins:
            - Id: AssetsBucket
              DomainName:
                'Fn::GetAtt': [AssetsBucket, DomainName]
              S3OriginConfig:
                OriginAccessIdentity:
                  'Fn::Join':
                    [
                      '',
                      [
                        'origin-access-identity/cloudfront/',
                        { Ref: AssetsUIOriginAccessIdentity },
                      ],
                    ]
          DefaultCacheBehavior:
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD, OPTIONS]
            TargetOriginId: AssetsBucket
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: all
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${env:ASSETS_ACM_ARN}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.1_2016
    AssetsRoute53ARecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: ${env:DOMAIN_HOSTED_ZONE}
        Name: ${env:ASSETS_DOMAIN_NAME}
        Type: A
        AliasTarget:
          DNSName: !GetAtt AssetsCloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
          EvaluateTargetHealth: false
    AssetsRoute53AAAARecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: ${env:DOMAIN_HOSTED_ZONE}
        Name: ${env:ASSETS_DOMAIN_NAME}
        Type: AAAA
        AliasTarget:
          DNSName: !GetAtt AssetsCloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
          EvaluateTargetHealth: false

functions:
  nuxt:
    memorySize: 2048
    timeout: 30
    handler: handler.render
    events:
      - http: ANY /
      - http: ANY /{proxy+}


Outputs:
  AssetsCloudFrontDistributionId:
    Value:
      Ref: AssetsCloudFrontDistribution
  AssetsCloudFrontDistributionDomainName:
    Value:
      'Fn::GetAtt': [AssetsCloudFrontDistribution, DomainName]
